"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, FileText, Download, Send, Eye } from "lucide-react"
import Image from "next/image"

interface CreateBulletinProps {
  onBack: () => void
  recommendations?: any
}

export function CreateBulletin({ onBack, recommendations }: CreateBulletinProps) {
  const [bulletinData, setBulletinData] = useState({
    title: "",
    kebele: "",
    season: "",
    targetCrops: "",
    keyRecommendations: "",
    weatherAlert: "",
    marketInfo: "",
    contactInfo: "",
  })
  const [isPreview, setIsPreview] = useState(false)

  const handleInputChange = (field: string, value: string) => {
    setBulletinData((prev) => ({ ...prev, [field]: value }))
  }

  const generateBulletin = () => {
    const currentDate = new Date().toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    })

    return `
# KEBELE AGRICULTURAL BULLETIN
**${bulletinData.title || "Weekly Agricultural Advisory"}**

---

**Date:** ${currentDate}
**Kebele:** ${bulletinData.kebele || "Not specified"}
**Season:** ${bulletinData.season || "Current season"}

## RECOMMENDED CROPS FOR THIS SEASON
${bulletinData.targetCrops || "Teff, Maize, Coffee - based on current conditions"}

## KEY RECOMMENDATIONS
${
  bulletinData.keyRecommendations ||
  `
• Land preparation should begin immediately
• Use improved seed varieties for better yields
• Apply organic fertilizer before planting
• Monitor weather conditions closely
`
}

## WEATHER ALERT
${bulletinData.weatherAlert || "Monitor local weather conditions. Prepare for seasonal rains."}

## MARKET INFORMATION
${bulletinData.marketInfo || "Current market prices favorable for recommended crops. Plan harvest timing accordingly."}

## CONTACT INFORMATION
**Field Agent:** ${bulletinData.contactInfo || "Contact your local field agent"}
**Emergency:** Call local agricultural office

---
*Generated by IndieCrop Agricultural Advisory System*
*Powered by AI recommendations and local expertise*
    `.trim()
  }

  const handleDownload = () => {
    const bulletin = generateBulletin()
    const blob = new Blob([bulletin], { type: "text/markdown" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `kebele-bulletin-${new Date().toISOString().split("T")[0]}.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleShare = () => {
    const bulletin = generateBulletin()
    if (navigator.share) {
      navigator.share({
        title: bulletinData.title || "Kebele Agricultural Bulletin",
        text: bulletin,
      })
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(bulletin)
      alert("Bulletin copied to clipboard!")
    }
  }

  return (
    <div className="min-h-screen bg-black">
      {/* Header */}
      <header className="border-b bg-black/80 backdrop-blur-md sticky top-0 z-50 border-green-500/20">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Button onClick={onBack} variant="ghost" className="text-green-500 hover:text-green-400 mr-2">
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <div className="h-8 w-8 relative">
              <Image src="/images/indiecrop-logo.png" alt="IndieCrop Logo" width={32} height={32} />
            </div>
            <div>
              <h1 className="font-bold text-lg text-white">Create Kebele Bulletin</h1>
              <p className="text-sm text-gray-400">Generate agricultural advisory for your kebele</p>
            </div>
          </div>
          <Badge className="bg-green-500 text-black">Field Agent</Badge>
        </div>
      </header>

      <div className="container mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Form Section */}
          <Card className="bg-gray-900 border-green-500/20">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2 text-white">
                <FileText className="h-5 w-5" />
                <span>Bulletin Information</span>
              </CardTitle>
              <CardDescription className="text-gray-400">
                Fill in the details to generate a comprehensive agricultural bulletin
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="title" className="text-white">
                  Bulletin Title
                </Label>
                <Input
                  id="title"
                  value={bulletinData.title}
                  onChange={(e) => handleInputChange("title", e.target.value)}
                  className="bg-gray-800 border-green-500/30 text-white"
                  placeholder="Weekly Agricultural Advisory"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="kebele" className="text-white">
                    Kebele Name
                  </Label>
                  <Input
                    id="kebele"
                    value={bulletinData.kebele}
                    onChange={(e) => handleInputChange("kebele", e.target.value)}
                    className="bg-gray-800 border-green-500/30 text-white"
                    placeholder="Enter kebele name"
                  />
                </div>
                <div>
                  <Label htmlFor="season" className="text-white">
                    Season
                  </Label>
                  <Select onValueChange={(value) => handleInputChange("season", value)}>
                    <SelectTrigger className="bg-gray-800 border-green-500/30 text-white">
                      <SelectValue placeholder="Select season" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="belg">Belg (Short Rains)</SelectItem>
                      <SelectItem value="meher">Meher (Main Rains)</SelectItem>
                      <SelectItem value="dry">Dry Season</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label htmlFor="targetCrops" className="text-white">
                  Target Crops
                </Label>
                <Input
                  id="targetCrops"
                  value={bulletinData.targetCrops}
                  onChange={(e) => handleInputChange("targetCrops", e.target.value)}
                  className="bg-gray-800 border-green-500/30 text-white"
                  placeholder="e.g., Teff, Maize, Coffee"
                />
              </div>

              <div>
                <Label htmlFor="keyRecommendations" className="text-white">
                  Key Recommendations
                </Label>
                <Textarea
                  id="keyRecommendations"
                  value={bulletinData.keyRecommendations}
                  onChange={(e) => handleInputChange("keyRecommendations", e.target.value)}
                  className="bg-gray-800 border-green-500/30 text-white"
                  placeholder="Enter key farming recommendations..."
                  rows={4}
                />
              </div>

              <div>
                <Label htmlFor="weatherAlert" className="text-white">
                  Weather Alert
                </Label>
                <Textarea
                  id="weatherAlert"
                  value={bulletinData.weatherAlert}
                  onChange={(e) => handleInputChange("weatherAlert", e.target.value)}
                  className="bg-gray-800 border-green-500/30 text-white"
                  placeholder="Weather conditions and alerts..."
                  rows={2}
                />
              </div>

              <div>
                <Label htmlFor="marketInfo" className="text-white">
                  Market Information
                </Label>
                <Textarea
                  id="marketInfo"
                  value={bulletinData.marketInfo}
                  onChange={(e) => handleInputChange("marketInfo", e.target.value)}
                  className="bg-gray-800 border-green-500/30 text-white"
                  placeholder="Current market prices and trends..."
                  rows={2}
                />
              </div>

              <div>
                <Label htmlFor="contactInfo" className="text-white">
                  Contact Information
                </Label>
                <Input
                  id="contactInfo"
                  value={bulletinData.contactInfo}
                  onChange={(e) => handleInputChange("contactInfo", e.target.value)}
                  className="bg-gray-800 border-green-500/30 text-white"
                  placeholder="Field agent contact details"
                />
              </div>
            </CardContent>
          </Card>

          {/* Preview Section */}
          <Card className="bg-gray-900 border-green-500/20">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center space-x-2 text-white">
                  <Eye className="h-5 w-5" />
                  <span>Bulletin Preview</span>
                </CardTitle>
                <div className="flex space-x-2">
                  <Button
                    onClick={handleDownload}
                    variant="outline"
                    className="bg-transparent border-green-500/50 text-green-500 hover:bg-green-500 hover:text-black"
                  >
                    <Download className="mr-2 h-4 w-4" />
                    Download
                  </Button>
                  <Button onClick={handleShare} className="bg-green-500 hover:bg-green-600 text-black">
                    <Send className="mr-2 h-4 w-4" />
                    Share
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="bg-gray-800 rounded-lg p-4 max-h-96 overflow-y-auto">
                <pre className="text-white text-sm whitespace-pre-wrap font-mono">{generateBulletin()}</pre>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
